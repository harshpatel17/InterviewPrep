### Algorithm

1. Given a 2nd Array filled with 1s and 0s
1. 0s represent water and 1s represent the islands
1. Find all islands in the 2D array 
1. Edges are considered to be next to water 
1. Island, horizontal or vertical adjacent 1s

Implementation Detail: DFS 

### Solution

```python
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        if not grid: 
            return 0 
        
        count = 0 
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1': 
                    self.dfs(grid,i,j)
                    count += 1
        return count
        
    def dfs(self, grid, i, j): 
        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != '1': 
            return 
        
        grid[i][j] = '#'
        
        self.dfs(grid,i+1,j)
        self.dfs(grid,i-1,j)
        self.dfs(grid,i,j+1)
        self.dfs(grid,i,j-1)
```

### Time/Space Complexity

-  Time Complexity: O(n)
- Space Complexity: 1
